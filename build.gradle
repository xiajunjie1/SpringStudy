
buildscript {
    //定义脚本使用资源
    apply from: 'dependencies.gradle';//引入所需要的依赖脚本库文件
    repositories {
        //maven {url 'https://repo.spring.io/libs-milestone'}
        maven {
            allowInsecureProtocol = true
           url 'https://maven.aliyun.com/repository/public'

        }

        maven {url 'https://repo.spring.io/libs-milestone'}


    }
    dependencies {
       // classpath libraries.'spring-boot-gradle-plugin'
    }

}


group project_group//定义在gradle.properties
version project_version//定义在gradle.properties
group project_group
version project_version
apply from: 'dependencies.gradle' // 引入所需要的依赖库文件
def env = System.getProperty("env") ?: 'dev' // 获取env环境属性
subprojects {//子模块
    apply plugin: 'java'
    //apply plugin:'org.springframework.boot'//引入插件
    //apply plugin:'io.spring.dependency-management'//引入插件
    apply plugin: 'java-library'//使用api依赖需要使用该插件
    sourceCompatibility=project_jdk//本次项目都是基于JDK17
    targetCompatibility=project_jdk
    repositories {  // 配置Gradle仓库
        def ALIYUN_REPOSITORY_URL = 'https://maven.aliyun.com/nexus/content/groups/public'
        def ALIYUN_JCENTER_URL = 'https://maven.aliyun.com/nexus/content/repositories/jcenter'
        all {
            ArtifactRepository repo ->
                if (repo instanceof MavenArtifactRepository) {
                    def url = repo.url.toString()
                    if (url.startsWith('https://repo1.maven.org/maven2')) {
                        project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL."
                        remove repo
                    }
                    if (url.startsWith('https://jcenter.bintray.com/')) {
                        project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL."
                        remove repo
                    }
                }
        }
        maven { url ALIYUN_REPOSITORY_URL } // 设置阿里云仓库
        maven { url ALIYUN_JCENTER_URL } // 设置阿里云仓库
    }
    dependencies {  // 公共依赖库管理
        /*
        implementation("org.springframework.boot:spring-boot-devtools");//依赖插件，允许项目的热部署
        testImplementation("org.springframework.boot:spring-boot-starter-test"){
            exclude group:'junit',module:'junit'//排除旧版本的测试工具
        }

        //以下为lombok插件的依赖配置
        compileOnly(libraries.'lombok');//编译生效
        annotationProcessor(libraries.'lombok');//注解生效，未配置该环境，无法启用
    */
        testImplementation(enforcedPlatform(libraries.'junit-bom'));//将当前项目强制绑定为Junit5运行
        testImplementation(libraries.'junit-jupiter-api');
        testImplementation(libraries.'junit-jupiter-engine');
        testImplementation(libraries.'junit-vintage-engine');
        testImplementation(libraries.'junit-platform-launcher');
        testImplementation(libraries.'spring-test');
        implementation(libraries.'slf4j-api');
        implementation(libraries.'logback-classic');
    }
    sourceSets {    // 源代码目录配置
        main { // main及相关子目录配置
            java { srcDirs = ['src/main/java'] }
            resources { srcDirs = ['src/main/resources', "src/main/profiles/$env"] }
        }
        test { // test及相关子目录配置
            java { srcDirs = ['src/test/java'] }
            resources { srcDirs = ['src/test/resources'] }
        }
    }
    test {  // 配置测试任务
        useJUnitPlatform() // 使用JUnit测试平台
    }
    // 最终生成的jar文件名称：baseName-version-classifier.extension
    task sourceJar(type: Jar, dependsOn: classes) { // 源代码的打包任务
        archiveClassifier = 'sources' // 设置文件的后缀
        from sourceSets.main.allSource // 所有源代码的读取路径
    }
    task javadocTask(type: Javadoc) { // JavaDoc文档打包任务
        options.encoding = 'UTF-8' // 设置文件编码
        source = sourceSets.main.allJava // 定义所有的Java源代码
    }
    task javadocJar(type: Jar, dependsOn: javadocTask) { // 先生成JavaDoc再打包
        archiveClassifier = 'javadoc' // 文件标记类型
        from javadocTask.destinationDir // 通过JavadocTask任务中找到目标路径
    }
    tasks.withType(Javadoc) {   // 文档编码配置
        options.encoding = 'UTF-8' // 定义编码
    }
    tasks.withType(JavaCompile) {   // 编译编码配置
        options.encoding = 'UTF-8' // 定义编码
    }
    artifacts { // 最终的打包的操作任务
        archives sourceJar // 源代码打包
        archives javadocJar // javadoc打包
    }
    gradle.taskGraph.whenReady {    // 在所有的操作准备好后触发
        tasks.each { task ->    // 找出所有的任务
            if (task.name.contains('test')) {   // 如果现在发现有test任务
                // 如果将enabled设置为true表示要执行测试任务，如果设置为false表示不执行测试任务
                task.enabled = true
            }
        }
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8' // 编码配置
}

project(":First-Spring"){
    dependencies {
        implementation(libraries.'spring-context');
        implementation(libraries.'javax.annotation-api');

    }
}

project(":Aop-Spring"){
    dependencies {
        implementation(libraries.'spring-context');
        implementation(libraries.'spring-aop');
        implementation(libraries.'spring-aspects');

    }
}

project(":Database-Spring"){
    dependencies {
        implementation(libraries.'spring-context');
        implementation(libraries.'spring-jdbc');
        implementation(libraries.'mysql-connector-java');
        implementation(libraries.'HikariCP');
        implementation(libraries.'spring-aop');
        implementation(libraries.'spring-aspects');


    }

}

project(":JPA-Spring"){
    dependencies {
        implementation(libraries.'mysql-connector-java');
        implementation(libraries.'jakarta.persistence-api');
        implementation(libraries.'hibernate-core');
        implementation(libraries.'hibernate-hikaricp');
        implementation(libraries.'hibernate-core-jakarta');
        implementation(libraries.'hibernate-jcache');
        implementation(libraries.'ehcache');
        implementation(libraries.'jaxb-api');
        implementation(libraries.'jaxb-impl');
        implementation(libraries.'jaxb-core');


    }

}


project(":JPA-SpringData"){
    dependencies {
        implementation(libraries.'mysql-connector-java');
        //implementation(libraries.'jakarta.persistence-api');
        implementation(libraries.'HikariCP');
       // implementation(libraries.'hibernate-core');
        implementation(libraries.'hibernate-hikaricp');
      //  implementation(libraries.'hibernate-core-jakarta');
        //implementation(libraries.'hibernate-jcache');
        implementation(libraries.'ehcache');
        implementation(libraries.'spring-data-jpa');
        implementation(libraries.'spring-aop');
        implementation(libraries.'spring-aspects');
        implementation 'org.hibernate:hibernate-core:5.6.5.Final';//为了适配SpringDataJPA2.X
        implementation 'org.hibernate:hibernate-jcache:5.6.5.Final';//为了适配hibernate
        //implementation 'org.springframework.data:spring-data-jpa:3.0.0-SNAPSHOT'

    }

    project(":Cache"){
        dependencies {
            implementation(libraries.'caffeine');
            implementation(libraries.'mysql-connector-java');
            implementation(libraries.'HikariCP');
            implementation(libraries.'hibernate-hikaricp');
            implementation(libraries.'spring-data-jpa');
            implementation(libraries.'spring-aop');
            implementation(libraries.'spring-aspects');
            implementation 'org.hibernate:hibernate-core:5.6.5.Final';//为了适配SpringDataJPA2.X
            implementation 'org.hibernate:hibernate-jcache:5.6.5.Final';//为了适配hibernate
            implementation('org.springframework:spring-context-support:5.3.20');
            implementation(libraries.'Memcached-Java-Client');
        }
    }

    project(":rabbitMQ"){
        dependencies {
            implementation(libraries.'amqp-client');
        }
    }

    project(":amqp-commons"){
        dependencies {

        }
    }

    project(":amqp-producer"){
        dependencies {
            implementation(project(":amqp-commons"));
            api(libraries.'spring-rabbit');
            api(libraries.'commons-pool2');
            //implementation(libraries.'spring-context');
        }
    }

    project(":amqp-consumer"){
        dependencies {
            implementation(project(":amqp-commons"));
            api(libraries.'spring-rabbit');
           api(libraries.'commons-pool2');
            //implementation(libraries.'spring-context');
        }
    }

}
